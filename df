diff --git a/.github/workflows/build.yml b/.github/workflows/build.yml
index d7da188..ae8c781 100644
--- a/.github/workflows/build.yml
+++ b/.github/workflows/build.yml
@@ -1,8 +1,8 @@
 name: build
 
 on:
-  schedule:
-    - cron: "0 12 * * *"
+  # schedule:
+  #   - cron: "0 12 * * *"
   push:
     paths-ignore:
       - "*.md"
diff --git a/Dockerfile b/Dockerfile
index bd6bd38..111457a 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -1,5 +1,4 @@
 FROM debian:bookworm
-MAINTAINER Adrian Dvergsdal [atmoz.net]
 
 # Steps done in one RUN layer:
 # - Install upgrades and new packages
diff --git a/LICENSE.txt b/LICENSE.txt
index 463400a..783df01 100644
--- a/LICENSE.txt
+++ b/LICENSE.txt
@@ -1,6 +1,7 @@
 MIT License
 
 Copyright (c) Adrian Dvergsdal
+Copyright (c) 2025 Davi Guides
 
 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
@@ -18,4 +19,4 @@ FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-SOFTWARE.
+SOFTWARE.
\ No newline at end of file
diff --git a/README.md b/README.md
index 9f923b8..90c62dc 100644
--- a/README.md
+++ b/README.md
@@ -1,180 +1,86 @@
-# SFTP
+# SimpleSFTP
 
-![GitHub Workflow Status](https://img.shields.io/github/actions/workflow/status/atmoz/sftp/build.yml?logo=github) ![GitHub stars](https://img.shields.io/github/stars/atmoz/sftp?logo=github) ![Docker Stars](https://img.shields.io/docker/stars/atmoz/sftp?label=stars&logo=docker) ![Docker Pulls](https://img.shields.io/docker/pulls/atmoz/sftp?label=pulls&logo=docker)
+> A lightweight, customizable, and secure SFTP server built with Docker and OpenSSH.
 
-![OpenSSH logo](https://raw.githubusercontent.com/atmoz/sftp/master/openssh.png "Powered by OpenSSH")
+<img src="images/diagram.png" alt="Diagram" align="right" style="width: 400px"/>
 
-# Supported tags and respective `Dockerfile` links
+**SimpleSFTP** provides an easy way to deploy a secure and flexible SFTP server using Docker.
+It supports dynamic user creation via environment variables or config files, with options for password authentication, SSH keys, custom UID/GID, and volume mounting.
 
-- [`debian`, `latest` (*Dockerfile*)](https://github.com/atmoz/sftp/blob/master/Dockerfile) ![Docker Image Size (debian)](https://img.shields.io/docker/image-size/atmoz/sftp/debian?label=debian&logo=debian&style=plastic)
-- [`alpine` (*Dockerfile*)](https://github.com/atmoz/sftp/blob/master/Dockerfile-alpine) ![Docker Image Size (alpine)](https://img.shields.io/docker/image-size/atmoz/sftp/alpine?label=alpine&logo=Alpine%20Linux&style=plastic)
+### Features
 
-# Securely share your files
+- Easy setup with Docker
+- User management through environment variables or configuration files
+- Support for SSH keys
+- Customizable host keys
+- Lightweight and efficient
 
-Easy to use SFTP ([SSH File Transfer Protocol](https://en.wikipedia.org/wiki/SSH_File_Transfer_Protocol)) server with [OpenSSH](https://en.wikipedia.org/wiki/OpenSSH).
+## Quick Start
 
-# Usage
-
-- Define users in (1) command arguments, (2) `SFTP_USERS` environment variable
-  or (3) in file mounted as `/etc/sftp/users.conf` (syntax:
-  `user:pass[:e][:uid[:gid[:dir1[,dir2]...]]] ...`, see below for examples)
-  - Set UID/GID manually for your users if you want them to make changes to
-    your mounted volumes with permissions matching your host filesystem.
-  - Directory names at the end will be created under user's home directory with
-    write permission, if they aren't already present.
-- Mount volumes
-  - The users are chrooted to their home directory, so you can mount the
-    volumes in separate directories inside the user's home directory
-    (/home/user/**mounted-directory**) or just mount the whole **/home** directory.
-    Just remember that the users can't create new files directly under their
-    own home directory, so make sure there are at least one subdirectory if you
-    want them to upload files.
-  - For consistent server fingerprint, mount your own host keys (i.e. `/etc/ssh/ssh_host_*`)
-
-# Examples
-
-## Simplest docker run example
+To run a simple SFTP server using Docker:
 
 ```
-docker run -p 22:22 -d atmoz/sftp foo:pass:::upload
+docker run -p 22:22 -d simplesftp foo:pass:::upload
 ```
 
-User "foo" with password "pass" can login with sftp and upload files to a folder called "upload". No mounted directories or custom UID/GID. Later you can inspect the files and use `--volumes-from` to mount them somewhere else (or see next example).
+## User Configuration
 
-## Sharing a directory from your computer
-
-Let's mount a directory and set UID:
+Define users using the `SFTP_USERS` environment variable or in a configuration file. The format is:
 
 ```
-docker run \
-    -v <host-dir>/upload:/home/foo/upload \
-    -p 2222:22 -d atmoz/sftp \
-    foo:pass:1001
+user:pass[:e][:uid[:gid[:dir1[,dir2]...]]]
 ```
 
-### Using Docker Compose:
+## Examples
 
-```
-sftp:
-    image: atmoz/sftp
-    volumes:
-        - <host-dir>/upload:/home/foo/upload
-    ports:
-        - "2222:22"
-    command: foo:pass:1001
-```
-
-### Logging in
-
-The OpenSSH server runs by default on port 22, and in this example, we are forwarding the container's port 22 to the host's port 2222. To log in with the OpenSSH client, run: `sftp -P 2222 foo@<host-ip>`
-
-## Store users in config
-
-```
-docker run \
-    -v <host-dir>/users.conf:/etc/sftp/users.conf:ro \
-    -v mySftpVolume:/home \
-    -p 2222:22 -d atmoz/sftp
-```
+### Upload User
 
-<host-dir>/users.conf:
+To create a user that can upload files:
 
 ```
-foo:123:1001:100
-bar:abc:1002:100
-baz:xyz:1003:100
+docker run -v <host-dir>/upload:/home/foo/upload -p 2222:22 -d simplesftp foo:pass
 ```
 
-## Encrypted password
+### Multiple Users
 
-Add `:e` behind password to mark it as encrypted. Use single quotes if using terminal.
+You can define multiple users in the `SFTP_USERS` variable:
 
 ```
-docker run \
-    -v <host-dir>/share:/home/foo/share \
-    -p 2222:22 -d atmoz/sftp \
-    'foo:$1$0G2g0GSt$ewU0t6GXG15.0hWoOX8X9.:e:1001'
+docker run -e SFTP_USERS="foo:pass:1001,bar:pass:1002" -p 2222:22 -d simplesftp
 ```
 
-Tip: you can use this Python code to generate encrypted passwords:  
-`docker run --rm python:alpine python -c "import crypt; print(crypt.crypt('YOUR_PASSWORD'))"`
-
-## Logging in with SSH keys
+### SSH Keys
 
-Mount public keys in the user's `.ssh/keys/` directory. All keys are automatically appended to `.ssh/authorized_keys` (you can't mount this file directly, because OpenSSH requires limited file permissions). In this example, we do not provide any password, so the user `foo` can only login with his SSH key.
+To allow login using SSH keys, mount the public key:
 
 ```
-docker run \
-    -v <host-dir>/id_rsa.pub:/home/foo/.ssh/keys/id_rsa.pub:ro \
-    -v <host-dir>/id_other.pub:/home/foo/.ssh/keys/id_other.pub:ro \
-    -v <host-dir>/share:/home/foo/share \
-    -p 2222:22 -d atmoz/sftp \
-    foo::1001
+docker run -v <host-dir>/id_rsa.pub:/home/foo/.ssh/keys/id_rsa.pub:ro -p 2222:22 -d simplesftp foo::
 ```
 
-## Providing your own SSH host key (recommended)
-
-This container will generate new SSH host keys at first run. To avoid that your users get a MITM warning when you recreate your container (and the host keys changes), you can mount your own host keys.
-
-```
-docker run \
-    -v <host-dir>/ssh_host_ed25519_key:/etc/ssh/ssh_host_ed25519_key \
-    -v <host-dir>/ssh_host_rsa_key:/etc/ssh/ssh_host_rsa_key \
-    -v <host-dir>/share:/home/foo/share \
-    -p 2222:22 -d atmoz/sftp \
-    foo::1001
-```
+### Custom Host Keys
 
-Tip: you can generate your keys with these commands:
+To use your own SSH host keys:
 
 ```
-ssh-keygen -t ed25519 -f ssh_host_ed25519_key < /dev/null
-ssh-keygen -t rsa -b 4096 -f ssh_host_rsa_key < /dev/null
+docker run -v <host-dir>/ssh_host_ed25519_key:/etc/ssh/ssh_host_ed25519_key -p 2222:22 -d simplesftp foo::
 ```
 
-## Execute custom scripts or applications
+## Volumes and Permissions
 
-Put your programs in `/etc/sftp.d/` and it will automatically run when the container starts.
-See next section for an example.
-
-## Bindmount dirs from another location
-
-If you are using `--volumes-from` or just want to make a custom directory available in user's home directory, you can add a script to `/etc/sftp.d/` that bindmounts after container starts.
-
-```
-#!/bin/bash
-# File mounted as: /etc/sftp.d/bindmount.sh
-# Just an example (make your own)
-
-function bindmount() {
-    if [ -d "$1" ]; then
-        mkdir -p "$2"
-    fi
-    mount --bind $3 "$1" "$2"
-}
-
-# Remember permissions, you may have to fix them:
-# chown -R :users /data/common
-
-bindmount /data/admin-tools /home/admin/tools
-bindmount /data/common /home/dave/common
-bindmount /data/common /home/peter/common
-bindmount /data/docs /home/peter/docs --read-only
-```
+Ensure proper permissions on mounted volumes to allow users to write files. Use UID/GID settings as needed.
 
-**NOTE:** Using `mount` requires that your container runs with the `CAP_SYS_ADMIN` capability turned on. [See this answer for more information](https://github.com/atmoz/sftp/issues/60#issuecomment-332909232).
+## Advanced Startup Customization
 
-# What's the difference between Debian and Alpine?
+You can place scripts in `/etc/sftp.d/` to customize startup behavior.
 
-The biggest differences are in size and OpenSSH version. [Alpine](https://hub.docker.com/_/alpine/) is 10 times smaller than [Debian](https://hub.docker.com/_/debian/). OpenSSH version can also differ, as it's two different teams maintaining the packages. Debian is generally considered more stable and only bugfixes and security fixes are added after each Debian release (about 2 years). Alpine has a faster release cycle (about 6 months) and therefore newer versions of OpenSSH. As I'm writing this, Debian has version 7.4 while Alpine has version 7.5. Recommended reading: [Comparing Debian vs Alpine for container & Docker apps](https://www.turnkeylinux.org/blog/alpine-vs-debian)
+## Why SimpleSFTP?
 
-# What version of OpenSSH do I get?
+SimpleSFTP offers a modernized approach to SFTP server management, focusing on simplicity, flexibility, and performance.
 
-It depends on which linux distro and version you choose (see available images at the top). You can see what version you get by checking the distro's packages online. I have provided direct links below for easy access.
+## License
 
-- [List of `openssh` packages on Alpine releases](https://pkgs.alpinelinux.org/packages?name=openssh&branch=&repo=main&arch=x86_64)
-- [List of `openssh-server` packages on Debian releases](https://packages.debian.org/search?keywords=openssh-server&searchon=names&exact=1&suite=all&section=main)
+MIT License
 
-# Daily builds
+## Acknowledgment
 
-Images are automatically built daily to get the newest version of OpenSSH provided by the package managers.
+This project is a fork based on atmoz/sftp.
diff --git a/files/entrypoint b/files/entrypoint
index 9c3d6e3..a2c10f9 100755
--- a/files/entrypoint
+++ b/files/entrypoint
@@ -38,17 +38,22 @@ if [ ! -f "$userConfFinalPath" ]; then
         grep -v -E "$reArgSkip" < "$userConfPath" > "$userConfFinalPath"
     fi
 
-    if $startSshd; then
-        # Append users from arguments to final config
-        for user in "$@"; do
-            echo "$user" >> "$userConfFinalPath"
-        done
-    fi
-
     if [ -n "$SFTP_USERS" ]; then
         # Append users from environment variable to final config
         IFS=" " read -r -a usersFromEnv <<< "$SFTP_USERS"
         for user in "${usersFromEnv[@]}"; do
+            IFS=":" read -r -a fields <<< "$user"
+            if [ "${#fields[@]}" -ne 5 ]; then
+                log "FATAL: Invalid user format: $user"
+                exit 4
+            fi
+            echo "$user" >> "$userConfFinalPath"
+        done
+    fi
+
+    if $startSshd; then
+        # Append users from arguments to final config
+        for user in "$@"; do
             echo "$user" >> "$userConfFinalPath"
         done
     fi
diff --git a/openssh.png b/openssh.png
deleted file mode 100644
index cc494b4..0000000
Binary files a/openssh.png and /dev/null differ
